---

#   - name: fix broken wwmkchroot file
#     lineinfile: 
#       dest: /usr/libexec/warewulf/wwmkchroot/centos-7.tmpl 
#       regexp: "^YUM_MIRROR(.*)7.2.1511(.*)"
#       line: 'YUM_MIRROR\g<1>7\g<2>'   # use \g<1> for backref followed by digit!
#       backrefs: yes
#
   - name: check current kernel version
     shell: uname -r | sed "s/.$(uname -m)//"
     register: running_kernel_version

   - name: check most recent installed kernel version
     shell: dnf list installed | grep 'kernel\.' | tail -n 1 | awk '{print $2}'
     register: installed_kernel_version
     args:
       warn: false

   - fail:
       msg: "Most recently installed kernel is not currently loaded version! Consider rebooting before building the vnfs"
     when: running_kernel_version.stdout != installed_kernel_version.stdout

   - fail:
       msg: "Loaded kernel does not match the build_kernel_ver in group_vars/all"
     when: running_kernel_version.stdout not in build_kernel_ver

   - name: remove old vnfs if it exists
     file: 
       path: "{{ compute_chroot_loc }}"
       state: absent

# Just using the base CentOS 8 template for now
#   - template: src=compute_template.j2 dest="{{ template_path }}{{ compute_template }}.tmpl"
#
#   - template: src=extend_compute_packages.j2 dest="{{ template_path }}extend_compute_packages"
#
#   - template: src=base_packages.j2 dest="{{ template_path }}base_packages"
 
   - name: make chroot
     command: wwmkchroot "{{ compute_template }}" "{{ compute_chroot_loc }}"

   - name: copy resolv.conf into image
     copy: src=/etc/resolv.conf dest="{{ compute_chroot_loc }}/etc/resolv.conf" #"

   - name: get OpenHPC Repo #hardcoded version # :(
     dnf: 
       name: "{{ openhpc_release_rpm }}" 
       state: present
       installroot: "{{ compute_chroot_loc }}"
       disable_gpg_check: yes

   - name: dnf install into the image chroot
     dnf:
       name: [
               "chrony",
               "kernel",
               "lmod-ohpc",
               "grub2",
               "freeipmi",
               "ipmitool",
               "ohpc-slurm-client",
             ]
       state: present
       installroot: "{{ compute_chroot_loc }}"

   - name: copy ssh keys over
     copy: src=cluster_root.pub dest={{ compute_chroot_loc }}/root/.ssh/authorized_keys

   - name: copy slurm.conf over
     copy: src=/etc/slurm/slurm.conf dest={{ compute_chroot_loc }}/etc/slurm/slurm.conf

   - name: put NFS home mount info in image
     lineinfile: line="{{ headnode_private_ip }}:/home /home nfs nfsvers=3,rsize=1024,wsize=1024,cto 0 0" dest={{ compute_chroot_loc }}/etc/fstab state=present

   - name: put NFS opt mount info in image
     lineinfile: line="{{ headnode_private_ip }}:/opt/ohpc/pub /opt/ohpc/pub nfs nfsvers=3 0 0" dest={{ compute_chroot_loc }}/etc/fstab state=present

   - name: put NFS opt mount info in image
     lineinfile: line="{{ headnode_private_ip }}:/export /export nfs nfsvers=3 0 0" dest={{ compute_chroot_loc }}/etc/fstab state=present

   - name: chronyd on compute image enabled 
     command: chroot '{{ compute_chroot_loc }}' systemctl enable chronyd

   - name: add headnode to compute chrony.conf
     lineinfile: line="server {{ headnode_private_ip }}" dest={{ compute_chroot_loc }}/etc/chrony.conf state=present

   - name: slurmd on compute image enabled 
     command: chroot '{{ compute_chroot_loc }}' systemctl enable slurmd

   - name: munge on compute image enabled 
     command: chroot '{{ compute_chroot_loc }}' systemctl enable munge

   - name: sssd on compute image enabled 
     command: chroot '{{ compute_chroot_loc }}' systemctl enable sssd
     when: enable_active_directory == true

   - name: wwimport file into image (passwd)
     command: wwsh file import /etc/passwd

   - name: wwimport file into image (group)
     command: wwsh file import /etc/group

   - name: wwimport file into image (shadow)
     command: wwsh file import /etc/shadow

   - name: wwimport file into image (slurm)
     command: wwsh file import /etc/slurm/slurm.conf --name slurm.conf

   - name: wwimport file into image (munge)
     command: wwsh file import /etc/munge/munge.key

   - name: sync passwd directly into VNFS chroot
     copy: src=/etc/passwd dest="{{ compute_chroot_loc }}/etc/passwd" #"

   - name: sync munge key directly into VNFS chroot
     copy: src=/etc/munge/munge.key dest="{{ compute_chroot_loc }}/etc/munge/munge.key" #"

   - name: import Active Directory files into image
     block:
       - name: wwimport file into image (krb5.keytab)
         command: wwsh file import /etc/krb5.keytab
       - name: wwimport file into image (krb5.conf)
         command: wwsh file import /etc/krb5.conf
       - name: wwimport file into image (sssd.conf)
         command: wwsh file import /etc/sssd/sssd.conf
     when: enable_active_directory == true

   - name: build bootstrap image
     shell: wwbootstrap {{ build_kernel_ver }}

   - name: build the vnfs 
     command: wwvnfs -y --chroot "{{ compute_chroot_loc }}/"

   - name: set up provisioning interface
     lineinfile: line="GATEWAYDEV={{ private_interface }}" dest=/etc/warewulf/network.ww create=yes
#" for vim
#
   - name: add network file to import
     command: wwsh -y file import /etc/warewulf/network.ww --name network

   - name: set network file path
     command: wwsh -y file set network --path /etc/sysconfig/network --mode=0644 --uid=0

