---

#   - name: fix broken wwmkchroot file
#     lineinfile: 
#       dest: /usr/libexec/warewulf/wwmkchroot/centos-7.tmpl 
#       regexp: "^YUM_MIRROR(.*)7.2.1511(.*)"
#       line: 'YUM_MIRROR\g<1>7\g<2>'   # use \g<1> for backref followed by digit!
#       backrefs: yes
#
   - name: check current kernel version
     shell: uname -r | sed "s/.$(uname -m)//"
     register: running_kernel_version

   - name: check most recent installed kernel version
     shell: yum list installed | grep 'kernel\.' | tail -n 1 | awk '{print $2}'
     register: installed_kernel_version

   - fail:
       msg: "Most recently installed kernel is not currently loaded version! Consider rebooting before building the vnfs"
     when: running_kernel_version.stdout != installed_kernel_version.stdout

   - fail:
       msg: "Loaded kernel does not match the build_kernel_ver in group_vars/all"
     when: running_kernel_version.stdout not in build_kernel_ver

   - name: remove old vnfs if it exists
     file:
       path: "{{ compute_chroot_loc }}"
       state: absent

   - template: src=compute_template.j2 dest="{{ template_path }}{{ compute_template }}.tmpl"

   - template: src=extend_compute_packages.j2 dest="{{ template_path }}extend_compute_packages"

   - template: src=base_packages.j2 dest="{{ template_path }}base_packages"
 
   - name: make chroot
     command: wwmkchroot "{{ compute_template }}" "{{ compute_chroot_loc }}"

   - name: copy resolve.conf into image
     copy: src=/etc/resolv.conf dest="{{ compute_chroot_loc }}/etc/resolv.conf" #"

   - name: yum install into the image chroot
     yum:
       state: present
       installroot: "{{ compute_chroot_loc }}"
       name:
         - chrony
         - 'kernel-{{ running_kernel_version.stdout }}'
         - lmod-ohpc
         - grub2
         - freeipmi
         - ipmitool
         - ohpc-slurm-client
         - ohpc-base-compute
         - tmux
         - ruby
         - turbojpeg
         - nc
         - '@X Window System'
         - '@Xfce'

   # one method to install TurboVNC
   - name: download TurboVNC rpm
     get_url:
       url: https://sourceforge.net/projects/turbovnc/files/2.2/turbovnc-2.2.x86_64.rpm
       dest: /var/tmp/turbovnc-2.2.x86_64.rpm
       checksum: md5:25711ad32bfae63031aff20528d4af79

   - name: install TurboVNC via rpm into chroot image
     yum:
       name: /var/tmp/turbovnc-2.2.x86_64.rpm
       state: present
       installroot: "{{ compute_chroot_loc }}"

   # Another method to install TurboVNC, tested
   # All information comes from TurboVNC official website:
   # https://turbovnc.org/pmwiki/uploads/Downloads/TurboVNC.repo
   #   - name: add TurboVNC repo into yum inside compute node image
   #     yum_repository:
   #       name: TurboVNC
   #       description: TurboVNC official RPMs
   #       baseurl: https://sourceforge.net/projects/turbovnc/files
   #       gpgcheck: yes
   #       gpgkey: http://pool.sks-keyservers.net/pks/lookup?op=get&search=0x6BBEFA1972FEB9CE
   #       exclude: 'turbovnc-*.*.9[0-9]-*' # exclude beta releases
   #       reposdir: "{{ compute_chroot_loc }}/etc/yum.repos.d"
   #
   #   - name: install TurboVNC via yum into chroot image
   #     yum:
   #       name: turbovnc
   #       state: present
   #       installroot: "{{ compute_chroot_loc }}"

   - name: download Websockify source code
     get_url:
       url: https://github.com/novnc/websockify/archive/v0.8.0.tar.gz
       dest: /var/tmp/websockify-0.8.0.tar.gz

   - name: extract Websockify source code into chroot env
     unarchive:
       src: /var/tmp/websockify-0.8.0.tar.gz
       dest: '{{ compute_chroot_loc }}/tmp'

   - name: install Websockify inside chroot env
     command: "chroot {{ compute_chroot_loc }} /bin/bash -c 'cd /tmp/websockify-0.8.0; python setup.py install'"

   # After we installed Xfce, the compute node is set to bootup in graphical mode.
   # This task is to unset that back to multi-user mode.
   - name: set compute node to boot with multi-user mode
     command: chroot '{{ compute_chroot_loc }}' systemctl set-default multi-user.target

   - name: put NFS home mount info in image
     lineinfile: line="{{ headnode_private_ip }}:/home /home nfs nfsvers=3,rsize=1024,wsize=1024,cto 0 0" dest={{ compute_chroot_loc }}/etc/fstab state=present

   - name: put NFS opt mount info in image
     lineinfile: line="{{ headnode_private_ip }}:/opt/ohpc/pub /opt/ohpc/pub-master nfs nfsvers=3 0 0" dest={{ compute_chroot_loc }}/etc/fstab state=present

   - name: put NFS opt mount info in image
     lineinfile: line="{{ headnode_private_ip }}:/export /export nfs nfsvers=3 0 0" dest={{ compute_chroot_loc }}/etc/fstab state=present

   - name: firewalld on compute image disabled
     command: chroot '{{ compute_chroot_loc }}' systemctl disable firewalld

   - name: chronyd on compute image enabled 
     command: chroot '{{ compute_chroot_loc }}' systemctl enable chronyd

   - name: add headnode to compute chrony.conf
     lineinfile: line="server {{ headnode_private_ip }}" dest={{ compute_chroot_loc }}/etc/chrony.conf state=present

   - name: slurmd on compute image enabled 
     command: chroot '{{ compute_chroot_loc }}' systemctl enable slurmd

   - name: wwimport file into image (passwd)
     command: wwsh file import /etc/passwd

   - name: wwimport file into image (group)
     command: wwsh file import /etc/group

   - name: wwimport file into image (shadow)
     command: wwsh file import /etc/shadow

   - name: wwimport file into image (slurm)
     command: wwsh file import /etc/slurm/slurm.conf --name slurm.conf

   - name: wwimport file into image (munge)
     command: wwsh file import /etc/munge/munge.key

   - name: wwimport file into image (lmod.sh)
     command: wwsh file import /etc/profile.d/lmod.sh

   - name: wwimport file into image (lmod.csh)
     command: wwsh file import /etc/profile.d/lmod.csh

   - name: build bootstrap image
     shell: wwbootstrap {{ build_kernel_ver }}

   - name: build the vnfs 
     command: wwvnfs -y --chroot "{{ compute_chroot_loc }}/"

   - name: set up provisioning interface
     lineinfile: line="GATEWAYDEV={{ private_interface }}" dest=/tmp/network.ww create=yes
#" for vim
#
   - name: add network file to import
     command: wwsh -y file import /tmp/network.ww --name network

   - name: set network file path
     command: wwsh -y file set network --path /etc/sysconfig/network --mode=0644 --uid=0

