---

#   - name: check hostname
#   - fail:
#       msg: "Hostname in inventory/headnode doesn't match local hostname! Please fix and run again."
#     when: inventory_hostname != ansible_hostname

#   - name: yum update
#     yum: name=* state=latest update_cache=yes

   - fail:
       msg: "Kernel version mismatch between loaded kernel and group-vars/all! Please fix and run again."
     when: build_kernel_ver != ansible_kernel

   - name: install necessary stuff
     yum:
       state: latest
       name:
         - "MySQL-python"
         - "epel-release"
         - "wget" 
         - "tcpdump"
         - "whois" 
         - "lsof" 
         - "xinetd"
         - "vim" 
         - "net-tools"
         - "exportfs" 
         - "firewalld"
         - "chrony"
         - "pciutils"
         - "rsync"
         - "bash-completion"
         - "libselinux-python"
         - "libsemanage-python"
         - "policycoreutils"
#         - "lua"  # testing; this could fix the lmod-ohpc issue?
 #otherwise, do a yum update --skip-broken, yum update...

   - name: get OpenHPC Repo #hardcoded version # :(
     yum: name={{ openhpc_release_rpm }} state=present

   - name: Install Copr plugin for yum
     yum: name=yum-plugin-copr state=present update_cache=true
     when: enable_copr == true

   - name: enable Copr Repos
     shell: yum -y copr enable "{{ item.repo_name }}"
     with_items: "{{ copr_repos }}"
     when: enable_copr == true and inventory_hostname in item.host

   - name: install fail2ban # separate b/c it's in epel
     yum: name=fail2ban state=latest 

#this is only necessary for non-local ansible!
#   - name: turn off requiretty for sudo
#     lineinfile:
#       dest: /etc/sudoers
#       regexp: "Defaults    requiretty"
#       line:  "Defaults    !requiretty"
#       state: present

   - template: src=firewall_conf/services/slurm.xml dest=/etc/firewalld/services/slurm.xml
 
   - template: src=firewall_conf/firewalld.conf dest=/etc/firewalld/firewalld.conf

   - template: src=firewall_conf/zones/internal.xml dest=/etc/firewalld/zones/internal.xml

   - template: src=firewall_conf/zones/public.xml dest=/etc/firewalld/zones/public.xml

   # default network profile naming in CentOS-7 uses the name  'System ethN' as
   # the profile name for the 'ethN' interface. The ansible framework uses
   # a single variable for the profile name interface name.   We change the
   # default profile names to match the interface name to match this convesion
   # and make nmcli commands more consistent with tranditional naming.
   - name: check for default public network profile name
     shell: nmcli con | grep '{{ public_interface }}'
     register: network_profile_name

   - name: simplify the name of the public network profile name
     command: nmcli con mod 'System {{ public_interface }}' connection.id '{{ public_interface }}'
     when: "'System' in network_profile_name.stdout"

   - name: check for default private network profile name
     shell: nmcli con | grep '{{ private_interface }}'
     register: network_profile_name

   - name: simplify the name of the private network profile name
     command: nmcli con mod 'System {{ private_interface }}' connection.id '{{ private_interface }}'
     when: "'System' in network_profile_name.stdout"

   - name: add private interface to internal zone via nmcli
     command: nmcli connection modify {{ private_interface }} connection.zone internal

   - name: add public interface to public zone via nmcli
     command: nmcli connection modify {{ public_interface }} connection.zone public

#   - name: restart dbus for firewalld :(
#     service: name=dbus state=restarted

# Changing it temporarily to stop
   - name: firewalld restart # to load new slurm service
     service: name=firewalld state=stopped

## This section seems to be redundant 
##   - name: add interface to internal zone firewall-cmd
##     firewalld:
##       zone: internal
##       interface: "{{ private_interface }}"
##       permanent: yes
##       state: enabled
##
##   - name: add interface to external zone firewall-cmd
##     firewalld:
##       zone: public
##       interface: "{{ public_interface }}"
##       permanent: yes
##       state: enabled
##
###   - name: add interfaces to external zone firewalld
###     lineinfile: dest=/etc/sysconfig/network-scripts/ifcfg-{{ public_interface }} regexp=^ZONE= line=ZONE=public
##
##   - name: add services to internal zone firewall-cmd
##     firewalld:
##       zone: internal
##       service: '{{ item }}'
##       permanent: yes
##       immediate: yes
##       state: enabled
##     with_items:
##       - 'slurm'
##       - 'mdns'
##       - 'ipp-client'
##       - 'dhcpv6-client'
##       - 'ssh'
##       - 'nfs'
##       - 'mountd'
##       - 'rpc-bind'
##       - 'http'
##       - 'https'
##       - 'tftp'
##       - 'samba-client'
##
##   - name: firewalld restart
##     service: name=firewalld state=restarted
 
   - name: set up /etc/hosts
     template: src=hosts.j2 dest=/etc/hosts

   - name: set up /etc/ssh/sshd_config
     template: src=sshd_config.j2 dest=/etc/ssh/sshd_config

   - name: restart sshd
     service: name=sshd state=restarted

   - name: selinux allow homedirs
     seboolean: 
       name: use_nfs_home_dirs
       state: yes
       persistent: yes

   - name: create /export dir for software
     file: path=/export state=directory owner=root group=root mode=0777

   - name: open up chrony across private network
     lineinfile:
       path: /etc/chrony.conf
       regexp: '^#allow 192'
       line: "allow all {{ private_network }}/24"
       state: present
       
 
   - name: enable and restart chrony
     service: name=chronyd state=restarted enabled=yes

